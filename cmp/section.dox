<cmn:g xmlns="http://www.w3.org/1999/xhtml" xmlns:cmn="urn:dox:cmn" xmlns:b="urn:dox:base" xmlns:wrd="urn:dox:word">
	<cmn:script>
		const {cutil} = await import("@ghasemkiani/base");
		
		let type = props["type"];
		let break_ = props["break"] || "page";
		let rtl = /ltr/i.test(props["dir"]) || context.wdoc.rtl;
		let dir = rtl ? "rtl" : "ltr";
		let width = props["width"] || context.wdoc.width;
		let height = props["height"] || context.wdoc.height;
		let margin = props["margin"];
		let marginY = props["margin-y"];
		let marginX = props["margin-x"];
		let marginTop = props["margin-top"] || marginY || context.wdoc.marginTop;
		let marginBottom = props["margin-bottom"] || marginY || context.wdoc.marginBottom;
		let marginStart = props["margin-start"] || marginX || context.wdoc.marginStart;
		let marginEnd = props["margin-end"] || marginX || context.wdoc.marginEnd;
		let marginHeader = props["margin-header"] || context.wdoc.marginHeader;
		let marginFooter = props["margin-footer"] || context.wdoc.marginFooter;
		let orientation = props["orientation"] || context.wdoc.orientation;
		let page = props["page"];
		let hfFirst = /^(true|yes)$/.test(props["hf-first"]) || context.wdoc.hfFirst;
		let hfEven = /^(true|yes)$/.test(props["hf-even"]) || context.wdoc.hfEven;
		let num = context.wdoc.sections.length + 1;
		let id = "WordSection" + num;
		let idHeaderFirst = cutil.srand(6);
		let idFooterFirst = cutil.srand(6);
		let idHeader = cutil.srand(6);
		let idFooter = cutil.srand(6);
		let idHeaderEven = cutil.srand(6);
		let idFooterEven = cutil.srand(6);
		context.templateComponent.context.wsect = {
			num,
			id,
			type,
			break: break_,
			rtl,
			dir,
			width,
			height,
			margin,
			marginX,
			marginY,
			marginTop,
			marginBottom,
			marginStart,
			marginEnd,
			marginHeader,
			marginFooter,
			orientation,
			page,
			hfFirst,
			hfEven,
			idHeaderFirst,
			idFooterFirst,
			idHeader,
			idFooter,
			idHeaderEven,
			idFooterEven,
			ndiv: null,
		};
		context.wdoc.sections.push(context.wsect);
	</cmn:script>
	<b:g node="{context.wdoc.d.nhead}">
		<style><cmn:script>
			const {cutil} = await import("@ghasemkiani/base");
			
			renderer.x.t(node, `
			@page ${context.wsect.id} {
				size: ${context.wsect.width} ${context.wsect.height};
				margin: ${context.wsect.marginTop} ${context.wsect.marginEnd} ${context.wsect.marginBottom} ${context.wsect.marginStart};
				mso-header-margin: ${context.wsect.marginHeader};
				mso-footer-margin: ${context.wsect.marginFooter};
				mso-page-orientation: ${context.wsect.orientation};
				${cutil.a(context.wsect.page) ? `mso-page-numbers: ${context.wsect.page};` : ""}
			}

			div.${context.wsect.id} {
				page: ${context.wsect.id};
			}
		`);</cmn:script></style>
	</b:g>
	<cmn:g xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml">
		<b:if cond="{context.wsect.num &gt; 1}">
			<wrd:break type="{`section.${context.wsect.break}`}"/>
		</b:if>
		<div>
			<cmn:script>
				context.wsect.ndiv = node;
				renderer.x.attr(node, "class", context.wsect.id);
				renderer.x.attr(node, "dir", context.wsect.dir);
			</cmn:script>
			<b:body component="{context.templateComponent}"/>
		</div>
	</cmn:g>
</cmn:g>
